{"version":3,"sources":["Components/ImportData/excelStudentTable.js","Components/ImportData/ImportExcel.js"],"names":["ExcelStudentTable","props","tableHeader","class","id","map","header","fields","student","i","key","enrollment","ImportExcel","useState","sheetData","setSheetData","lable","setLable","error","setError","loading","setLoading","response","setResponse","setTableHeader","useEffect","console","log","onFileChange","e","a","file","target","files","acceptedType","fileType","name","split","pop","indexOf","reader","FileReader","onload","data","result","Uint8Array","workbook","XLSX","read","type","SheetNames","forEach","sheetName","utils","sheet_to_json","Sheets","res","trim","length","tempData","push","excelStudentList","readAsArrayBuffer","className","onSubmit","preventDefault","document","getElementById","reset","axios","post","APIENDPOINTS","importExcel","then","msg","Success","catch","err","accept","onChange","htmlFor","dangerouslySetInnerHTML","__html","Loading","style","textAlign","undefined"],"mappings":"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","file":"static/js/11.71226c95.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction ExcelStudentTable(props) {\r\n    const tableHeader = props.tableHeader\r\n    const renderData = (data) => {\r\n        return data.map((student, i) => {\r\n            return (\r\n                <tr key={student.enrollment}>\r\n                    <td>{i + 1}</td>\r\n                    {tableHeader.map((header) => {\r\n                        \r\n                        if(header === 'gender') return <td>{student[header] === ('Male' || 'M' || 'male') ? 'male' : 'female'}</td>\r\n                        return <td>{student[header]}</td>\r\n                    })}\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div class=\"table-responsive\">\r\n            <table class=\"table table-bordered table-hover\" id=\"table-to-xls\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Sr No.</th>\r\n                       {tableHeader.map((header) => <th>{header}</th>)}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>{renderData(props.fields)}</tbody>\r\n            </table>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ExcelStudentTable\r\n","import React, { useEffect, useState } from 'react';\r\nimport XLSX from 'xlsx';\r\nimport axios from 'axios';\r\n\r\nimport Loading from '../../Util/Loading';\r\nimport ExcelStudentTable from './excelStudentTable';\r\nimport { APIENDPOINTS } from '../../redux/api_endpoint';\r\n\r\nconst ImportExcel = () => {\r\n  const [sheetData, setSheetData] = useState();\r\n  const [lable, setLable] = useState('Select Excel File');\r\n  const [error, setError] = useState();\r\n  const [loading, setLoading] = useState();\r\n  const [response, setResponse] = useState({});\r\n  const [tableHeader, setTableHeader] = useState([]);\r\n  useEffect(() => {\r\n    console.log(typeof sheetData)\r\n    sheetData && console.log(sheetData)\r\n  }, [sheetData])\r\n\r\n  const handleSubmit = (e) => {\r\n    \r\n    e.preventDefault();\r\n    if (!sheetData) {\r\n      setError('Plese Select Excel File First!!');\r\n      setSheetData();\r\n      document.getElementById(\"ExcelForm\").reset();\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    axios\r\n      .post(APIENDPOINTS.importExcel(), sheetData)\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        setResponse({ type: 'success', msg: res.data.Success });\r\n        setLoading(false);\r\n        setSheetData();\r\n        setTableHeader([]);\r\n        document.getElementById(\"ExcelForm\").reset();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        setResponse({\r\n          type: 'danger',\r\n          msg: err.response.data && 'Something Went Wrong!!',\r\n        });\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const onFileChange = async (e) => {\r\n    var file = e.target.files[0];\r\n    \r\n    const acceptedType = ['xlsx', 'xls', 'csv'];\r\n    const fileType = file.name.split('.').pop();\r\n    if (acceptedType.indexOf(fileType) < 0) {\r\n      setError('Only Excel File Allow!!');\r\n      setLable('Select Excel File');\r\n      setSheetData();\r\n      return;\r\n    }\r\n    setError();\r\n    setLable(file.name);\r\n\r\n    var reader = new FileReader();\r\n\r\n    reader.onload = function (e) {\r\n      var data = e.target.result;\r\n      data = new Uint8Array(data);\r\n      var workbook = XLSX.read(data, { type: 'array' });\r\n      console.log(workbook);\r\n      var result = {};\r\n      workbook.SheetNames.forEach(function (sheetName) {\r\n        result = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], {\r\n          header: 1,\r\n        });\r\n        //console.log(roa)\r\n        // if (roa.length) result[sheetName] = roa; for more sheet\r\n      });\r\n      // see the result, caution: it works after reader event is done.\r\n      console.log(result);\r\n\r\n      var res = [];\r\n      //this is header of excel file\r\n      result[0] = [...result[0]].map(key => key.trim())\r\n      setTableHeader([...result[0]])\r\n      for (let i = 1; i < result.length; i++) {\r\n        let tempData = {};\r\n        for (let data in result[i]) {\r\n          \r\n          var key = result[0][data];\r\n        \r\n          tempData[key] = result[i][data];\r\n        }\r\n        console.log(tempData);\r\n        res.push(tempData);\r\n      }\r\n      setSheetData({\r\n        excelStudentList: res,\r\n      });\r\n    };\r\n    reader.readAsArrayBuffer(file);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={handleSubmit} id=\"ExcelForm\">\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-6 mt-lg-5 mx-auto\">\r\n            <div className=\"custom-file\">\r\n              <input\r\n                type=\"file\"\r\n                accept=\".xlsx, .xls, .csv\"\r\n                className=\"custom-file-input\"\r\n                id=\"excelFile\"\r\n                onChange={onFileChange}\r\n              />\r\n              <label className=\"custom-file-label\" htmlFor=\"excelFile\">\r\n                {lable}\r\n              </label>\r\n              <label\r\n                className=\"error\"\r\n                dangerouslySetInnerHTML={{ __html: error }}\r\n              ></label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-group mt-3 text-center\">\r\n          <button type=\"submit\" className=\"btn btn-success\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n        {loading === true ? (\r\n          <Loading />\r\n        ) : (\r\n          response.msg && (\r\n            <div\r\n              className={`alert alert-${response.type}`}\r\n              style={{ textAlign: 'center' }}\r\n            >\r\n              {response.msg}\r\n            </div>\r\n          )\r\n        )}\r\n      </form>\r\n      {sheetData !== undefined && <ExcelStudentTable fields={sheetData[\"excelStudentList\"]} tableHeader={tableHeader}></ExcelStudentTable>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImportExcel;\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}
{"version":3,"sources":["Components/ImportData/ImportExcel.js"],"names":["ImportExcel","useState","sheetData","setSheetData","lable","setLable","error","setError","loading","setLoading","response","setResponse","onFileChange","e","a","file","target","files","acceptedType","fileType","name","split","pop","indexOf","reader","FileReader","onload","data","result","Uint8Array","workbook","XLSX","read","type","console","log","SheetNames","forEach","sheetName","utils","sheet_to_json","Sheets","header","res","i","length","tempData","push","excelStudentList","readAsArrayBuffer","className","onSubmit","preventDefault","axios","post","then","msg","Success","catch","err","accept","id","onChange","htmlFor","dangerouslySetInnerHTML","__html","style","textAlign"],"mappings":"8QAoIeA,UA9HK,WAAO,IAAD,EACUC,qBADV,mBACjBC,EADiB,KACNC,EADM,OAEEF,mBAAS,qBAFX,mBAEjBG,EAFiB,KAEVC,EAFU,OAGEJ,qBAHF,mBAGjBK,EAHiB,KAGVC,EAHU,OAIMN,qBAJN,mBAIjBO,EAJiB,KAIRC,EAJQ,OAKQR,mBAAS,IALjB,mBAKjBS,EALiB,KAKPC,EALO,KAgClBC,EAAY,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,yDACfC,EAAOF,EAAEG,OAAOC,MAAM,GACpBC,EAAe,CAAC,OAAQ,MAAO,OAC/BC,EAAWJ,EAAKK,KAAKC,MAAM,KAAKC,QAClCJ,EAAaK,QAAQJ,GAAY,GAJlB,uBAKjBZ,EAAS,2BACTF,EAAS,qBACTF,IAPiB,0BAUnBI,IACAF,EAASU,EAAKK,OAEVI,EAAS,IAAIC,YAEVC,OAAS,SAAUb,GACxB,IAAIc,EAAOd,EAAEG,OAAOY,OACpBD,EAAO,IAAIE,WAAWF,GACtB,IAAIG,EAAWC,IAAKC,KAAKL,EAAM,CAAEM,KAAM,UACvCC,QAAQC,IAAIL,GACZ,IAAIF,EAAS,GACbE,EAASM,WAAWC,SAAQ,SAAUC,GACpCV,EAASG,IAAKQ,MAAMC,cAAcV,EAASW,OAAOH,GAAY,CAC5DI,OAAQ,OAMZR,QAAQC,IAAIP,GAEZ,IAAIe,EAAM,GAEVT,QAAQC,IAAIP,EAAO,IACnB,IAAK,IAAIgB,EAAI,EAAGA,EAAIhB,EAAOiB,OAAQD,IAAK,CACtC,IAAIE,EAAW,GACf,IAAK,IAAInB,KAAQC,EAAOgB,GACtBE,EAASlB,EAAO,GAAGD,IAASC,EAAOgB,GAAGjB,GAExCgB,EAAII,KAAKD,GAEX3C,EAAa,CACX6C,iBAAkBL,KAGtBnB,EAAOyB,kBAAkBlC,GA7CN,4CAAH,sDAgDlB,OACE,yBAAKmC,UAAU,aACb,0BAAMC,SA3EW,SAACtC,GAEpB,GADAA,EAAEuC,kBACGlD,EAGH,OAFAK,EAAS,wCACTJ,IAGFM,GAAW,GACX4C,IACGC,KAAK,mBAAoBpD,GACzBqD,MAAK,SAACZ,GACLT,QAAQC,IAAIQ,EAAIhB,MAChBhB,EAAY,CAAEsB,KAAM,UAAWuB,IAAKb,EAAIhB,KAAK8B,UAC7ChD,GAAW,MAEZiD,OAAM,SAACC,GACNzB,QAAQC,IAAIwB,EAAIjD,UAChBC,EAAY,CACVsB,KAAM,SACNuB,IAAKG,EAAIjD,SAASiB,MAAQ,2BAE5BlB,GAAW,QAuDX,yBAAKyC,UAAU,OACb,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,eACb,2BACEjB,KAAK,OACL2B,OAAO,oBACPV,UAAU,oBACVW,GAAG,YACHC,SAAUlD,IAEZ,2BAAOsC,UAAU,oBAAoBa,QAAQ,aAC1C3D,GAEH,2BACE8C,UAAU,QACVc,wBAAyB,CAAEC,OAAQ3D,QAM3C,yBAAK4C,UAAU,+BACb,4BAAQjB,KAAK,SAASiB,UAAU,mBAAhC,YAIW,IAAZ1C,EACC,kBAAC,IAAD,MAEAE,EAAS8C,KACP,yBACEN,UAAS,sBAAiBxC,EAASuB,MACnCiC,MAAO,CAAEC,UAAW,WAEnBzD,EAAS8C","file":"static/js/12.ed366356.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport XLSX from 'xlsx';\r\nimport axios from 'axios';\r\n\r\nimport Loading from '../../Util/Loading';\r\n\r\nconst ImportExcel = () => {\r\n  const [sheetData, setSheetData] = useState();\r\n  const [lable, setLable] = useState('Select Excel File');\r\n  const [error, setError] = useState();\r\n  const [loading, setLoading] = useState();\r\n  const [response, setResponse] = useState({});\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!sheetData) {\r\n      setError('Plese Select Excel File First!!');\r\n      setSheetData();\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    axios\r\n      .post('/api/importExcel', sheetData)\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        setResponse({ type: 'success', msg: res.data.Success });\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        setResponse({\r\n          type: 'danger',\r\n          msg: err.response.data && 'Something Went Wrong!!',\r\n        });\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const onFileChange = async (e) => {\r\n    var file = e.target.files[0];\r\n    const acceptedType = ['xlsx', 'xls', 'csv'];\r\n    const fileType = file.name.split('.').pop();\r\n    if (acceptedType.indexOf(fileType) < 0) {\r\n      setError('Only Excel File Allow!!');\r\n      setLable('Select Excel File');\r\n      setSheetData();\r\n      return;\r\n    }\r\n    setError();\r\n    setLable(file.name);\r\n\r\n    var reader = new FileReader();\r\n\r\n    reader.onload = function (e) {\r\n      var data = e.target.result;\r\n      data = new Uint8Array(data);\r\n      var workbook = XLSX.read(data, { type: 'array' });\r\n      console.log(workbook);\r\n      var result = {};\r\n      workbook.SheetNames.forEach(function (sheetName) {\r\n        result = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], {\r\n          header: 1,\r\n        });\r\n        //console.log(roa)\r\n        // if (roa.length) result[sheetName] = roa; for more sheet\r\n      });\r\n      // see the result, caution: it works after reader event is done.\r\n      console.log(result);\r\n\r\n      var res = [];\r\n\r\n      console.log(result[0]);\r\n      for (let i = 1; i < result.length; i++) {\r\n        let tempData = {};\r\n        for (let data in result[i]) {\r\n          tempData[result[0][data]] = result[i][data];\r\n        }\r\n        res.push(tempData);\r\n      }\r\n      setSheetData({\r\n        excelStudentList: res,\r\n      });\r\n    };\r\n    reader.readAsArrayBuffer(file);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-6 mt-lg-5 mx-auto\">\r\n            <div className=\"custom-file\">\r\n              <input\r\n                type=\"file\"\r\n                accept=\".xlsx, .xls, .csv\"\r\n                className=\"custom-file-input\"\r\n                id=\"excelFile\"\r\n                onChange={onFileChange}\r\n              />\r\n              <label className=\"custom-file-label\" htmlFor=\"excelFile\">\r\n                {lable}\r\n              </label>\r\n              <label\r\n                className=\"error\"\r\n                dangerouslySetInnerHTML={{ __html: error }}\r\n              ></label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-group mt-3 text-center\">\r\n          <button type=\"submit\" className=\"btn btn-success\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n        {loading === true ? (\r\n          <Loading />\r\n        ) : (\r\n          response.msg && (\r\n            <div\r\n              className={`alert alert-${response.type}`}\r\n              style={{ textAlign: 'center' }}\r\n            >\r\n              {response.msg}\r\n            </div>\r\n          )\r\n        )}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImportExcel;\r\n"],"sourceRoot":""}
version: '3.7'

# Define services
services:
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    image: ldce:1.0
    ports:
      - "5000:5000" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on: 
      - db # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/polls?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      SPRING_DATASOURCE_USERNAME: callicoder
      SPRING_DATASOURCE_PASSWORD: callicoder    
      COM_LDCE_RESOURCE_PREFIX: file://
      COM_LDCE_RESOURCE_LOCATION: /usr/app/uploads
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
    volumes: 
      - db-data:/usr/app/uploads
      # - frontend

  # # Frontend Service 
  # app-client:
  #   build:
  #     context: polling-app-client # Use an image built from the specified dockerfile in the `polling-app-client` directory.
  #     dockerfile: Dockerfile
  #     args:
  #       REACT_APP_API_BASE_URL: http://127.0.0.1:8080/api
  #   ports:
  #     - "9090:80" # Map the exposed port 80 on the container to port 9090 on the host machine
  #   restart: always
  #   depends_on:
  #     - app-server
  #   networks:
  #     - frontend  

  # Database Service (Mysql)
  db:
    image: mysql:5.7
    ports:
      - "3333:3306"
    restart: always
    environment:
      MYSQL_DATABASE: polls
      MYSQL_USER: callicoder
      MYSQL_PASSWORD: callicoder
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backend  
  
# Volumes
volumes:
  db-data:

# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend:    